{
	"useState": {
		"prefix": ["us", "hooks.useState"],
		"body": ["const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState})"],
		"description": "useState, Returns a stateful value, and a function to update it.\n"
	},
	"useEffect Without Cleanup": {
		"prefix": ["ue", "hooks.useEffect"],
		"body": ["useEffect(() => {", "\t$1", "}, [])"],
		"description": "useEffect, Accepts a function that contains imperative, possibly effectful code.\n"
	},
	"useEffect Cleanup": {
		"prefix": ["uec", "hooks.useEffect.Cleanup"],
		"body": [
			"useEffect(() => {",
			"\t// side effects",
			"\t$1",
			"",
			"\t// cleanup",
			"\treturn () => {",
			"\t\t$2",
			"\t}",
			"}, [])"
		],
		"description": "useEffect, return a clean-up function.\n"
	},
	"useContext": {
		"prefix": ["uc", "hooks.useContext"],
		"body": ["const ${1:featureContext} = useContext(${2:FeatureContext})"],
		"description": "useContext, Accepts a context object (the value returned from `React.createContext`) and returns the current context value for that context. \n"
	},
	"useReducer": {
		"prefix": ["ur", "hooks.useReducer"],
		"body": ["const [state, dispatch] = useReducer(${1:reducer}, ${2:initializerArg})"],
		"description": "useReducer, An alternative to `useState`. Accepts a reducer of type `(state, action) => newState`, and returns the current state paired with a `dispatch` method.\n"
	},
	"useCallback": {
		"prefix": ["ucb", "hooks.useCallback"],
		"body": ["let ${1:memoizedCallback} = useCallback(() => {", "\t${3:fn($2)}", "}, [${2:deps}])"],
		"description": "useCallback, Returns a memoized callback.\n"
	},
	"useMemo": {
		"prefix": ["um", "hooks.useMemo"],
		"body": ["let ${1:memoizedValue} = useMemo(() => ${3:computeExpensiveValue}($2), [${2:deps}])"],
		"description": "useMemo, Returns a memoized value.\n"
	},
	"useRef": {
		"prefix": ["ure", "hooks.useRef"],
		"body": ["const ${1:ref} = useRef(${2:initialValue})"],
		"description": "useRef, returns a mutable ref object whose `.current` property is initialized to the passed argument (`initialValue`). The returned object will persist for the full lifetime of the component.\n"
	},
	"useImperativeHandle": {
		"prefix": ["uih", "hooks.useImperativeHandle"],
		"body": [
			"// exposed components",
			"import React, { useRef, useImperativeHandle, forwardRef } from 'react'",
			"",
			"function Button(props, ref) {",
			"\tconst buttonRef = useRef()",
			"\tuseImperativeHandle(ref, () => ({",
			"\t\texposedProperty: () => {",
			"\t\t\tconsole.log(`event in Button`)",
			"\t\t},",
			"\t}))",
			"\treturn (",
			"\t\t<button ref={buttonRef} {...props}>",
			"\t\t\tButton",
			"\t\t</button>",
			"\t)",
			"}",
			"",
			"",
			"export default forwardRef(Button)",
			"",
			"",
			"// parent components ",
			"import React, { useRef } from 'react'",
			"import Button from './Button'",
			"",
			"function Form() {",
			"\tconst buttonRef = useRef(null)",
			"",
			"\tconst handleClick = () => {",
			"\t\tconsole.log(Object.keys(buttonRef.current)) // ['exposedProperty']",
			"\t\tconsole.log('event in Form')",
			"\t\tbuttonRef.current.exposedProperty()",
			"\t}",
			"",
			"\treturn (",
			"\t\t<>",
			"\t\t\t<Button onClick={handleClick} ref={buttonRef} />",
			"\t\t</>",
			"\t)",
			"}"
		],
		"description": "useImperativeHandle, customizes the instance value that is exposed to parent components when using `ref`.\n"
	},
	"useDebugValue": {
		"prefix": ["udv", "hooks.useDebugValue"],
		"body": ["useDebugValue(${1:value})"],
		"description": "useDebugValue, can be used to display a label for custom hooks in React DevTools.\n"
	},
	"useLayoutEffect": {
		"prefix": ["ule", "hooks.useLayoutEffect"],
		"body": [
			"useLayoutEffect(() => {",
			"\t// side effects",
			"\t$1",
			"",
			"\t// cleanup",
			"\treturn () => {",
			"\t\t$2",
			"\t}",
			"}, [])"
		],
		"description": "useLayoutEffect, Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside `useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.\n"
	}
}
